openapi: 3.0.3
info:
  title: Tapis Notifications API
  description: The Tapis Notifications API provides for management of subscriptions and event publication
  version: '0.0.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Notifications API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: General
    description: General service health and readiness
  - name: Subscriptions
    description: Manage notification subscription resources. Create, retrieve, update, etc.
  - name: Events
    description: Support event publication
  - name: Permissions
    description: Manage Tapis permissions for resources. Grant, revoke and retrieve.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /notifications -----------------------------------------------------
  '/v3/notifications/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/notifications/readycheck':
    get:
      tags:
        - General
      description: Ready check.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  # --- Paths for /notifications/subscriptions ------------------------------------------------
  '/v3/notifications/subscriptions':
    get:
      tags:
        - Subscriptions
      summary: Retrieve subscriptions
      description: Retrieve list of subscriptions. Use search and select query parameters to limit results.
      operationId: getSubscriptions
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query paramter. For example search=(id.like.MySub*)~(enabled.eq.true)
          schema:
            type: string
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sub1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,owner,topicFilter
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Subscriptions
      summary: Create a subscription
      description: |
        Create a subscription using a request body. 
        Id is optional. If not provided a UUID will be generated.
        Id must be unique within a tenant and can be composed of alphanumeric characters
        and the following special characters [-._~].
        Description is optional with a maximum length of 2048 characters.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a POST request to create a subscription.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - created
          - updated
      operationId: postSubscription
      requestBody:
        required: true
        description: A JSON object specifying information for the subscription to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSubscription'
      responses:
        '201':
          description: Subscription created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Subscription already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/search':
    get:
      tags:
        - Subscriptions
      summary: Retrieve list of subscriptions matching search conditions specified as query parameters
      description: Retrieve details for subscriptions. Use query parameters to specify search conditions. For example owner.eq=jdoe
      operationId: searchSubscriptionsQueryParameters
      parameters:
        - name: freeFormParameterName
          in: query
          description: Free form query parameters.
          explode: true
          allowEmptyValue: true
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sub2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,owner,topicFilter
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Subscriptions
      summary: Retrieve list of subscriptions matching search conditions
      description: |
        Retrieve details for subscriptions. Use request body to specify SQL-like search conditions.
      operationId: searchSubscriptionsRequestBody
      parameters:
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sub1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=id,owner,topicFilter
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchSubscriptions'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{subscriptionId}':
    get:
      tags:
        - Subscriptions
      summary: Retrieve subscription details
      description: |
        Retrieve information for a subscription given the subscription Id.
      operationId: getSubscription
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. For example select=id,owner,topicFilter
          schema:
            type: string
            default: 'allAttributes'
      responses:
        '200':
          description: Subscription found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscription'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Subscriptions
      summary: Update selected attributes of a subscription
      description: |
        Update selected attributes of a subscription. Request body may only contain updatable attributes. Subscription must exist.

        Attributes that may not be updated via PATCH are

          - id
          - owner
          - enabled

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: patchSubscription
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchSubscription'
      responses:
        '200':
          description: Subscription updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Subscriptions
      summary: Update all updatable attributes of a subscription
      description: |
        Update all updatable attributes of a subscription using a request body identical to POST. Subscription must exist.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a PUT request to update a subscription.

        The attributes that are allowed but ignored for both PUT and POST are

          - tenant
          - uuid
          - created
          - updated

        In addition for a PUT operation the following non-updatable attributes are allowed but ignored

          - id
          - owner
          - enabled

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: putSubscription
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutSubscription'
      responses:
        '200':
          description: Subscription updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Subscription already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{subscriptionId}/isEnabled':
    get:
      tags:
        - Subscriptions
      summary: Check if subscription is currently enabled
      description: |
        Check if a subscription is currently enabled, i.e. available for use.
      operationId: isEnabled
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{subscriptionId}/enable':
    post:
      tags:
        - Subscriptions
      summary: Update a subscription to be active
      description: |
        Update a subscription to be active. Matching events will start being delivered.
      operationId: enableSubscription
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Subscription enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{subscriptionId}/disable':
    post:
      tags:
        - Subscriptions
      summary: Update a subscription to be inactive
      description: |
        Update a subscription to be inactive. Matching events will stop being delivered.
      operationId: disableSubscription
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Subscription disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{subscriptionId}/delete':
    post:
      tags:
        - Subscriptions
      summary: Delete a subscription
      description: |
        Remove a subscription. Events will stop being delivered.
        Subscription must be re-created to resume event delivery.
      operationId: deleteSubscription
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Subscription deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{subscriptionId}/changeOwner/{userName}':
    post:
      tags:
        - Subscriptions
      summary: Change subscription owner
      description: |
        Change owner of a subscription.
      operationId: changeSubscriptionOwner
      parameters:
        - name: subscriptionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Subscription owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for notifications/events ------------------------------------------------
  '/v3/notifications/events':
    post:
      tags:
        - Events
      summary: Publish an event
      description: |
        Publish an event to be distributed to all subscriberstion. Event details are in the request body.
      operationId: publishEvent
      requestBody:
        required: true
        description: A JSON object specifying the event details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostEvent'
      responses:
        '201':
          description: Event published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'


# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------

    # --- TapisSubscription --------------------------------------------------------
    TapisSubscription:
      type: object
      properties:
        tenant:
          type: string
        id:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        topicFilter:
          type: string
        subjectFilter:
          type: string
        deliveryMethods:
          $ref: '#/components/schemas/DeliveryMethods'
        notes:
          type: object
        created:
          type: string
        updated:
          type: string
   # --- DeliveryMethods --------------------------------------------------------
    DeliveryMethods:
      type: array
      items:
        $ref: '#/components/schemas/DeliveryMethod'
    # --- DeliveryMethod ------------------------------------------------------------
    DeliveryMethod:
      type: object
      required:
        - deliveryType
      properties:
        deliveryType:
          $ref: '#/components/schemas/DeliveryTypeEnum'
        webhookUrl:
          type: string
#        emailAddress:
#          type: string
    # --- String types with constraints ------------------------------------
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    DescriptionString:
      type: string
      maxLength: 2048
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostSubscription:
      type: object
      required:
        - topicFilter
        - deliveryMethods
      properties:
        id:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        topicFilter:
          type: string
        subjectFilter:
          type: string
        deliveryMethods:
          $ref: '#/components/schemas/DeliveryMethods'
        notes:
          type: object
    ReqPatchSubscription:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        topicFilter:
          type: string
        subjectFilter:
          type: string
        deliveryMethods:
          $ref: '#/components/schemas/DeliveryMethods'
        notes:
          type: object
    ReqPutSubscription:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        topicFilter:
          type: string
        subjectFilter:
          type: string
        deliveryMethods:
          $ref: '#/components/schemas/DeliveryMethods'
        notes:
          type: object
    ReqPostEvent:
      type: object
      required:
        - source
        - topic
        - time
      properties:
        source:
          type: string
        topic:
          type: string
        subject:
          type: string
        time:
          type: string
    ReqPerms:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          minItems: 1
          items:
            type: string
    ReqSearchSubscriptions:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespSubscription:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TapisSubscription'
        metadata:
          type: object
    RespSubscriptions:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisSubscription'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    DeliveryTypeEnum:
      type: string
      enum:
        - WEBHOOK
#        - EMAIL
#        - QUEUE
#        - ACTOR
