openapi: 3.0.3
info:
  title: Tapis Notifications API
  description: The Tapis Notifications API provides for management of subscriptions and event publication
  version: '0.0.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Notifications API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: General
    description: General service health and readiness
  - name: Subscriptions
    description: Manage notification subscriptions. Create, retrieve, update, etc.
  - name: Events
    description: Event publication
  - name: Test
    description: Support for managing a sequence of test notifications.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /notifications -----------------------------------------------------
  '/v3/notifications/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/notifications/readycheck':
    get:
      tags:
        - General
      description: Ready check.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  # --- Paths for /notifications/subscriptions ------------------------------------------------
  '/v3/notifications/subscriptions':
    get:
      tags:
        - Subscriptions
      summary: Retrieve subscriptions
      description: Retrieve list of subscriptions. Use search and select query parameters to limit results.
      operationId: getSubscriptions
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query paramter. For example search=(name.like.MySub*)~(enabled.eq.true)
          schema:
            type: string
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=name(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=name(asc)&startAfter=my.sub1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=name,owner,typeFilter
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Subscriptions
      summary: Create a subscription
      description: |
        Create a subscription using a request body. 
        Name must be unique within a tenant and can be composed of alphanumeric characters and the following
        special characters [-._~].
        Description is optional with a maximum length of 2048 characters.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a POST request to create a subscription.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - expiry
          - created
          - updated
      operationId: postSubscription
      requestBody:
        required: true
        description: A JSON object specifying information for the subscription to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSubscription'
      responses:
        '201':
          description: Subscription created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Subscription already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/search':
    get:
      tags:
        - Subscriptions
      summary: Retrieve list of subscriptions matching search conditions specified as query parameters
      description: Retrieve details for subscriptions. Use query parameters to specify search conditions. For example owner.eq=jdoe
      operationId: searchSubscriptionsQueryParameters
      parameters:
        - name: freeFormParameterName
          in: query
          description: Free form query parameters.
          explode: true
          allowEmptyValue: true
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=name(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=name(asc)&startAfter=my.sub2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=name,owner,typeFilter
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Subscriptions
      summary: Retrieve list of subscriptions matching search conditions
      description: |
        Retrieve details for subscriptions. Use request body to specify SQL-like search conditions.
      operationId: searchSubscriptionsRequestBody
      parameters:
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=name(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=name(asc)&startAfter=my.sub1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. For example select=name,owner,typeFilter
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchSubscriptions'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}':
    get:
      tags:
        - Subscriptions
      summary: Retrieve subscription details
      description: |
        Retrieve information for a subscription given the subscription name.
      operationId: getSubscription
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. For example select=name,owner,typeFilter
          schema:
            type: string
            default: 'allAttributes'
      responses:
        '200':
          description: Subscription found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscription'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Subscriptions
      summary: Update selected attributes of a subscription
      description: |
        Update selected attributes of a subscription. Request body may only contain updatable attributes. Subscription must exist.

        Attributes that may not be updated via PATCH are

          - name
          - owner
          - enabled
          - ttlMinutes

        Note that the attributes owner, enabled and ttlMinutes may be modified using other endpoints.
      operationId: patchSubscription
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchSubscription'
      responses:
        '200':
          description: Subscription updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Subscriptions
      summary: Update all updatable attributes of a subscription
      description: |
        Update all updatable attributes of a subscription using a request body identical to POST. Subscription must exist.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a PUT request to update a subscription.

        The attributes that are allowed but ignored for both PUT and POST are

          - tenant
          - uuid
          - expiry
          - created
          - updated

        In addition for a PUT operation the following non-updatable attributes are allowed but ignored

          - name
          - owner
          - enabled
          - ttlMinutes

        Note that the attributes owner, enabled and ttlMinutes may be modified using other endpoints.
      operationId: putSubscription
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutSubscription'
      responses:
        '200':
          description: Subscription updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Subscription already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Subscriptions
      summary: Remove a subscription
      description: |
        Remove a subscription. Events will stop being delivered.
        Subscription must be re-created to resume event delivery.
      operationId: deleteSubscription
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Subscription deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/isEnabled':
    get:
      tags:
        - Subscriptions
      summary: Check if subscription is currently enabled
      description: |
        Check if a subscription is currently enabled, i.e. available for use.
      operationId: isEnabled
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/enable':
    post:
      tags:
        - Subscriptions
      summary: Update a subscription to be active
      description: |
        Update a subscription to be active. Matching events will start being delivered.
      operationId: enableSubscription
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Subscription enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/disable':
    post:
      tags:
        - Subscriptions
      summary: Update a subscription to be inactive
      description: |
        Update a subscription to be inactive. Matching events will stop being delivered.
      operationId: disableSubscription
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Subscription disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/changeOwner/{userName}':
    post:
      tags:
        - Subscriptions
      summary: Change subscription owner
      description: |
        Change owner of a subscription.
      operationId: changeSubscriptionOwner
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Subscription owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/updateTTL/{ttlMinutes}':
    post:
      tags:
        - Subscriptions
      summary: Update Time-To-Live for a subscription.
      description: |
        Update Time-To-Live (TTL) for a subscription.
        TTL provided as number of minutes. Use 0 to indicate subscription should never expire.
      operationId: updateTTL
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: ttlMinutes
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subscription TTL updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for notifications/events ------------------------------------------------
  '/v3/notifications/events':
    post:
      tags:
        - Events
      summary: Publish an event
      description: |
        Publish an event to be distributed to all subscribers. Event details are in the request body.

        Note that certain attributes of an event are assigned by the service when the event is published.
        These attributes are allowed in the request body but ignored so that the JSON received as part of
        a notification delivery may be modified and used when making a POST request to publish another event.
        The attributes that are allowed but ignored are

          - tenant
          - user
          - uuid
      operationId: postEvent
      requestBody:
        required: true
        description: A JSON object specifying the event details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  # --- Paths for notifications/test ------------------------------------------------
  '/v3/notifications/test/begin':
    post:
      tags:
        - Test
      summary: Start a test sequence by creating a subscription and publishing an event
      description: |
        Start a test sequence by creating a subscription and publishing an initial event matching the subscription.
        The subscription will have the following properties:
          - owner: <api_user>
          - name: <subscription_uuid>
          - typeFilter: notifications.test.*
          - subjectFilter: <subscription_uuid>
          - deliveryTarget:
            - deliveryMethod: WEBHOOK
            - deliveryAddress: <tenant_base_url>/v3/notifications/test/callback/<subscription_uuid>
          - ttlMinutes: 60

        The default TTL of 1 hour may be overridden using the query parameter *subscriptionTTL*.

        The initial event will have the following properties:
          - user: <api_User>
          - source: <tenant_base_url>/v3/notifications/test
          - type: notifications.test.begin
          - subject: <subscription_uuid>

        The initial event will be published to the main queue and the subscription will be returned to the caller.
        The sequence of test events may be continued by publishing events that match the test subscription. 
        Results will be recorded when notifications associated with the test are received via the callback.
        The first notification should be recorded shortly after the initial event is published.
      operationId: beginTestSequence
      parameters:
        - name: subscriptionTTL
          in: query
          description: Subscription TTL in minutes. Default is 60 minutes.
          schema:
            type: integer
            default: 60
      requestBody:
        required: false
        description: A json request body. Not used but required to correctly generate the client.
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Test subscription created and test event published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscription'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/test/{name}':
    get:
      tags:
        - Test
      summary: Retrieve status and history for a test sequence.
      description: |
        Retrieve status and result history for a test sequence created using the endpoint *test/begin*.
      operationId: getTestSequence
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Results found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespTestSequence'
        '400':
          description: Subscription is not associated with a test sequence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Test
      summary: Remove all test sequence artifacts.
      description: |
        Remove all test sequence artifacts including the subscription and results.
      operationId: deleteTestSequence
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Test sequence deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Subscription is not associated with a test sequence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Test sequence not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/test/callback/{name}':
    post:
      tags:
        - Test
      summary: Record a test sequence notification result.
      description: |
        Callback endpoint for receiving a notification associated with a test sequence.
        Results will be recorded when notifications associated with the test are received via the callback.
      operationId: recordTestNotification
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      requestBody:
        required: true
        description: A JSON object with event details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Test event received and recorded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Subscription is not associated with a test sequence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Test sequence not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------

    # --- TapisSubscription --------------------------------------------------------
    TapisSubscription:
      type: object
      properties:
        tenant:
          type: string
        name:
          $ref: '#/components/schemas/NameString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        typeFilter:
          type: string
        subjectFilter:
          type: string
        deliveryTargets:
          $ref: '#/components/schemas/DeliveryTargets'
        ttlMinutes:
          type: integer
        uuid:
          type: string
          format: uuid
        expiry:
          type: string
        created:
          type: string
        updated:
          type: string
   # --- DeliveryTargets --------------------------------------------------------
    DeliveryTargets:
      type: array
      items:
        $ref: '#/components/schemas/DeliveryTarget'
    # --- DeliveryTarget ------------------------------------------------------------
    DeliveryTarget:
      type: object
      required:
        - deliveryMethod
        - deliveryAddress
      properties:
        deliveryMethod:
          $ref: '#/components/schemas/DeliveryMethod'
        deliveryAddress:
          type: string
    # --- Event ------------------------------------------------------------
    Event:
      type: object
      required:
        - source
        - type
        - time
      properties:
        source:
          type: string
        type:
          type: string
        subject:
          type: string
        seriesId:
          type: string
        time:
          type: string
          format: date-time
        uuid:
          type: string
          format: uuid
        tenant:
          type: string
        user:
          type: string
    # --- Notification ------------------------------------------------------------
    Notification:
      type: object
      required:
        - uuid
        - tenant
        - name
        - deliveryTarget
        - event
        - created
      properties:
        uuid:
          type: string
          format: uuid
        tenant:
          type: string
        name:
          type: string
        deliveryTarget:
          $ref: '#/components/schemas/DeliveryTarget'
        event:
          $ref: '#/components/schemas/Event'
        created:
          type: string
          format: date-time
    # --- String types with constraints ------------------------------------
    NameString:
      type: string
      minLength: 1
      maxLength: 80
    DescriptionString:
      type: string
      maxLength: 2048
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    # --- TestSequence --------------------------------------------------------
    TestSequence:
      type: object
      properties:
        tenant:
          type: string
        subscription:
          $ref: '#/components/schemas/TapisSubscription'
        receivedEvents:
          type: array
          items:
            # TODO create Event component
            $ref: '#/components/schemas/Event'
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostSubscription:
      type: object
      required:
        - typeFilter
        - deliveryTargets
      properties:
        name:
          $ref: '#/components/schemas/NameString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        typeFilter:
          type: string
        subjectFilter:
          type: string
        deliveryTargets:
          $ref: '#/components/schemas/DeliveryTargets'
        ttlMinutes:
          type: integer
    ReqPatchSubscription:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        typeFilter:
          type: string
        subjectFilter:
          type: string
        deliveryTargets:
          $ref: '#/components/schemas/DeliveryTargets'
    ReqPutSubscription:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        typeFilter:
          type: string
        subjectFilter:
          type: string
        deliveryTargets:
          $ref: '#/components/schemas/DeliveryTargets'
    ReqSearchSubscriptions:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespSubscription:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TapisSubscription'
        metadata:
          type: object
    RespSubscriptions:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisSubscription'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    RespTestSequence:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TestSequence'
        metadata:
          type: object
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    DeliveryMethod:
      type: string
      enum:
        - WEBHOOK
        - EMAIL
